{"version":3,"file":"positions.js","sourceRoot":"","sources":["../../../src/positions.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject} from 'aurelia-framework';\n\nimport {FieldModel} from \"./hockey-field-model\";\nimport {CustomEventHandler, PropertyChangedEventArgs} from \"./my-custom-events-handler\";\nimport {CanvasController} from \"./canvas-controller\";\nimport {Player} from \"./player\";\nimport {App} from \"./app\"\n\nfunction findClosestAncestorByClass(el: Element, cls: string) {\n    // tslint:disable-next-line\n    while ((el = el.parentElement) && !el.classList.contains(cls)) {}\n    return el;\n}\n\n@inject(App)\nexport class Positions {\n    public heading: string = \"opstelling komende wedstrijden\";\n    private default_width: number = 200;\n    private default_height: number = 200;\n    private default_field_name: string = \"field hockey\";\n    public fieldnames: Array<string>;\n    public onAttach: CustomEventHandler<Positions, boolean>;\n    public onDetach: CustomEventHandler<Positions, boolean>;\n    public onPropertyChangedEvent: CustomEventHandler<Positions, PropertyChangedEventArgs>;\n\n    private all_fields: Map<string, FieldModel>;\n    private loaded_fields: Map<string, FieldModel>;\n    private _selected_field_idx: string;\n    private _isAttached: boolean;\n    private mainContentContainer: HTMLDivElement;\n    private wrapperContainer: HTMLDivElement;\n    private fieldCanvas: HTMLCanvasElement;\n    private canvas_controller: CanvasController;\n    private _canvas_dimension: [number, number];\n    private _playerCount: number;\n    private _editablePlayer: Player;\n\n    constructor(app?: App) {\n        if (app == null || app.positionVM == null) {\n            this.initialize();\n            app.positionVM = this;\n        } else {\n            this.initalizeFromOther(app.positionVM);\n            app.positionVM = this;\n        }\n\n\n        this.onAttach.AddMethod((caller, t) => {\n            if (!this.fieldCanvas) {return;}\n            this.canvas_controller.setCanvas(this.fieldCanvas);\n            this.canvas_controller.draw();\n        }, this);\n        this.onDetach.AddMethod((caller, t) => {\n            //TODO: deactivate canvas\n        }, this);\n\n        this.onPropertyChangedEvent.AddMethod(this.PropertyChangedCallBack, this);\n        this.canvas_controller.onPropertyChangedEvent.AddMethod(this.CanvasChangedCallBack, this);\n    }\n\n    private initialize() {\n        this.fieldnames = [];\n\n        this.onAttach = new CustomEventHandler();\n        this.onDetach = new CustomEventHandler();\n        this.onPropertyChangedEvent = new CustomEventHandler();\n        this.all_fields = new Map();\n        this.loaded_fields = new Map();\n        this._selected_field_idx = null;\n        this._isAttached = false;\n        this._canvas_dimension = [0,0];\n        this._playerCount = 0;\n        this._editablePlayer = null;\n        this.canvas_controller = new CanvasController(60);\n\n\n        let thefield =  new FieldModel(\"field hockey\", \"field-hockey.png\", undefined);\n        this.all_fields.set(thefield.name, thefield);\n        thefield =  new FieldModel(\"sq hockey\", \"field-hockey.png\", 1);\n        this.all_fields.set(thefield.name, thefield);\n        for (let f of this.all_fields) {\n            f[1].onload.AddMethod(this.firstTimeLoading, this);\n            f[1].load();\n        }\n    }\n    private initalizeFromOther(other: Positions) {\n        this.fieldnames = other.fieldnames;\n\n        this.onAttach = new CustomEventHandler();\n        this.onDetach = new CustomEventHandler();\n        this.onPropertyChangedEvent = new CustomEventHandler();\n        this.all_fields = other.all_fields;\n        this.loaded_fields = other.loaded_fields;\n        this._selected_field_idx = other.selected_field_idx;\n        this._isAttached = other.isAttached;\n        this.canvas_controller = other.canvas_controller;\n        //const dim = other.canvas_dimension;\n        this._canvas_dimension = other._canvas_dimension;\n        this._playerCount = <number>other.playerCount;\n        this._editablePlayer = other.editablePlayer;\n    }\n\n    get editablePlayerName(): string {\n        if (!this._editablePlayer) {return \"\";}\n        return this._editablePlayer.name;\n    }\n    set editablePlayerName(value: string) {\n        if (this._editablePlayer) {\n            this._editablePlayer.name = value;\n        }\n    }\n\n\n    get editablePlayerLocation(): number {\n        if (!this._editablePlayer) {return -1;}\n        return this._editablePlayer.loc;\n    }\n    set editablePlayerLocation(value: number) {\n        if (this._editablePlayer) {\n            this._editablePlayer.loc = value;\n        }\n    }\n\n    get editablePlayer(): Player {\n        return this._editablePlayer;\n    }\n    set editablePlayer(value: Player) {\n        this._editablePlayer = value;\n    }\n    public get selected_field_idx(): string {\n        return this._selected_field_idx;\n    }\n    public set selected_field_idx(value: string) {\n        const old = this._selected_field_idx;\n        if (value === old) {return;}\n        this._selected_field_idx = value;\n        this.onPropertyChangedEvent.Invoke(this, new PropertyChangedEventArgs(\"selected_field_idx\", old, value));\n    }\n\n    private get selected_field(): FieldModel {\n        const idx = this.selected_field_idx;\n        if (idx === null) {return undefined;}\n        return this.loaded_fields.get(idx);\n    }\n\n    public get selected_aspect_ratio(): number {\n        const field = this.selected_field;\n        if (!field) {return undefined;}\n        return field.aspect_ratio;\n\n    }\n\n    public get max_width(): number {\n        if (!this.mainContentContainer) {return undefined;}\n        let style = window.getComputedStyle(this.mainContentContainer, null);\n        const paddingLeft = parseFloat(style.paddingLeft);\n        const paddingRight = parseFloat(style.paddingLeft);\n        style = window.getComputedStyle(this.fieldCanvas, null);\n        const marginLeft = parseFloat(style.marginLeft);\n        const marginRight = parseFloat(style.marginRight);\n        return this.mainContentContainer.clientWidth - paddingLeft - paddingRight - marginLeft - marginRight;\n    }\n\n    public get max_height(): number {\n        if (!this.mainContentContainer) {return undefined;}\n        const elem: Element = this.mainContentContainer;\n        const rect = elem.getBoundingClientRect();\n        const elem2 = this.wrapperContainer;\n        const elem_page_host = findClosestAncestorByClass(elem2, 'page-host');\n        const sy = elem_page_host.scrollTop;\n        let style = window.getComputedStyle(this.mainContentContainer, null);\n        const paddingTop = parseFloat(style.paddingTop);\n        const paddingBottom = parseFloat(style.paddingBottom);\n        style = window.getComputedStyle(this.fieldCanvas, null);\n        const marginTop = parseFloat(style.marginTop);\n        const marginBottom = parseFloat(style.marginBottom);\n        return window.innerHeight - (rect.top + sy) - paddingBottom - paddingTop - marginTop - marginBottom - 11;\n    }\n\n    public get canvas_width(): number {\n        return this.canvas_dimension[0];\n    }\n    public set canvas_width(value: number) {\n        this.canvas_dimension = [value, this.canvas_dimension[1]];\n    }\n    public get canvas_height(): number {\n        return this.canvas_dimension[1];\n    }\n    public set canvas_height(value: number) {\n        this.canvas_dimension = [this.canvas_dimension[0], value];\n    }\n\n    public get isAttached(): boolean {\n        return this._isAttached;\n    }\n    public set isAttached(value: boolean) {\n        this._isAttached = value;\n    }\n\n    public get canvas_dimension(): [number, number] {\n        const calc_dim: [number, number] = this.calculateCanvasDimensions();\n        if (calc_dim[0] !== this._canvas_dimension[0]  || calc_dim[1] !== this._canvas_dimension[1]) {\n            this.canvas_dimension = calc_dim;\n        }\n        return this._canvas_dimension;\n    }\n\n    public set canvas_dimension(value: [number, number]) {\n        const old = this._canvas_dimension;\n        if (old[0] === value[0] && old[1] === value[1]) {return;}\n        this._canvas_dimension = value;\n        this.onPropertyChangedEvent.Invoke(this, new PropertyChangedEventArgs(\"canvas_dimension\", old, value));\n    }\n\n    get playerCount(): number | string{\n        return this._playerCount;\n    }\n\n    set playerCount(value: number | string) {\n        let tval;\n        if (typeof value === \"string\") {\n            if (value === \"\") {\n                tval = 0;\n            } else {\n                tval = parseInt(<string>value,10);\n            }\n        } else {\n            tval = value;\n        }\n        tval = Math.max(Math.floor(tval), 0);\n        const old = this._playerCount;\n        if (value === old) {return;}\n        this._playerCount = tval;\n        this.onPropertyChangedEvent.Invoke(this, new PropertyChangedEventArgs(\"playerCount\", old, tval));\n    }\n\n    public calculateCanvasDimensions(): [number, number] {\n        const field = this.selected_field;\n        if (!(field && this._isAttached && field.aspect_ratio)) {return [this.default_width, this.default_height];}\n        const max_width = this.max_width;\n        let height = this.max_height;\n        let width = field.get_width(height);\n        if (width > max_width) {\n            width = max_width;\n            height = field.get_height(width);\n        }\n        return [width, height];\n    }\n\n    public firstTimeLoading (theField: FieldModel, loaded: boolean) {\n        this.loaded_fields.set(theField.name, theField);\n        this.fieldnames.push(theField.name);\n\n        for (let f of this.all_fields) {\n            if (!f[1].loaded) {\n                return;\n            }\n        }\n        this.allLoaded();\n    }\n\n    public allLoaded() {\n        this.selected_field_idx=this.default_field_name;\n    }\n\n    public attached() {\n        this._isAttached = true;\n        this.onAttach.Invoke(this, false);\n    }\n    public detached() {\n        this._isAttached = false;\n        this.onDetach.Invoke(this, false);\n    }\n\n    private PropertyChangedCallBack(positions: Positions, propertyChangedEventArgs: PropertyChangedEventArgs) {\n        switch (propertyChangedEventArgs.property_name) {\n            case \"selected_field_idx\":\n                this.canvas_controller.setBackground(this.selected_field.image);\n                break;\n            case \"canvas_dimension\":\n                break;\n            case \"playerCount\":\n                const l = this.canvas_controller.getObjectsOfType(Player);\n                if (propertyChangedEventArgs.new_value > l.length) {\n                    for (let i=Math.floor(propertyChangedEventArgs.new_value - l.length); i>0; i-=1) {\n                        this.canvas_controller.createNewPlayer();\n                    }\n                } else if (propertyChangedEventArgs.new_value < l.length) {\n                    const N = l.length - propertyChangedEventArgs.new_value;\n                    this.canvas_controller.removePlayers(N);\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    private CanvasChangedCallBack(positions: Positions, propertyChangedEventArgs: PropertyChangedEventArgs) {\n        switch (propertyChangedEventArgs.property_name) {\n            case \"selectedObject\":\n                this.editablePlayer = propertyChangedEventArgs.new_value;\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]}