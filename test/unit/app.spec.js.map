{"version":3,"file":"app.spec.js","sourceRoot":"","sources":["app.spec.ts"],"names":[],"mappings":";;;IAEA;QAGE,SAAS,CAAC,OAAO;YACf,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,GAAG,CAAC,MAAM;YACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC;KACF;IAED,QAAQ,CAAC,gBAAgB,EAAE;QACzB,IAAI,GAAG,EAAE,YAAY,CAAC;QAEtB,UAAU,CAAC;YACT,YAAY,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,GAAG,GAAG,IAAI,SAAG,EAAE,CAAC;YAChB,GAAG,CAAC,eAAe,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE;YAC/B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE;YAChC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE;YAChC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAC,SAAS,CAAC,EAAE,IAAI,EAAE,SAAS,EAAG,QAAQ,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC,SAAS,EAAE,CAAC,CAAC;QACpI,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE;YAC7B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC,cAAc,EAAE,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE;YACrC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC,cAAc,EAAE,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","sourcesContent":["import {App} from '../../src/app';\n\nclass RouterStub {\n  routes;\n  \n  configure(handler) {\n    handler(this);\n  }\n  \n  map(routes) {\n    this.routes = routes;\n  }\n}\n\ndescribe('the App module', () => {\n  var sut, mockedRouter;\n\n  beforeEach(() => {\n    mockedRouter = new RouterStub();\n    sut = new App();\n    sut.configureRouter(mockedRouter, mockedRouter);\n  });\n\n  it('contains a router property', () => {\n    expect(sut.router).toBeDefined();\n  });\n\n  it('configures the router title', () => {\n    expect(sut.router.title).toEqual('Aurelia');\n  });\n\n  it('should have a welcome route', () => {\n    expect(sut.router.routes).toContain({ route: ['','welcome'], name: 'welcome',  moduleId: 'welcome', nav: true, title:'Welcome' });\n  });\n\n  it('should have a users route', () => {\n     expect(sut.router.routes).toContain({ route: 'users', name: 'users', moduleId: 'users', nav: true, title:'Github Users' });\n  });\n\n  it('should have a child router route', () => {\n    expect(sut.router.routes).toContain({ route: 'child-router', name: 'child-router', moduleId: 'child-router', nav: true, title:'Child Router' });\n  });\n});\n"]}