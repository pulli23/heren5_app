{"version":3,"file":"canvas-controller.js","sourceRoot":"","sources":["canvas-controller.ts"],"names":[],"mappings":";;;IAOA;QAYE,YAAY,IAAY;YAXjB,2BAAsB,GAAyD,IAAI,6CAAkB,EAAE,CAAC;YAG9F,iBAAY,GAAwB,EAAE,CAAC;YAChD,cAAS,GAAU,IAAI,aAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;YAIlC,oBAAe,GAAW,IAAI,CAAC;YAC/B,kBAAa,GAAsB,EAAE,CAAC;YAG5C,IAAI,CAAC,MAAM,GAAG,IAAI,4BAAY,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACxD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;YAC5E,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChF,CAAC;QACD,IAAI,cAAc;YAChB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;QAED,IAAI,cAAc,CAAC,KAAa;YAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,KAAK,KAAK,CAAC,CAAC,CAAC;gBACnC,MAAM,CAAC;YACT,CAAC;YACD,IAAI,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,KAAK,CAAC;YACvC,CAAC;YACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,IAAI,CAAC;YACtC,CAAC;YACD,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,EACrC,IAAI,mDAAwB,CAAC,gBAAgB,EAAE,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QAC9E,CAAC;QAED,IAAW,WAAW;YACpB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;QAED,IAAY,MAAM;YAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;QACD,IAAY,MAAM,CAAC,KAAwB;YACzC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC;QAED,IAAW,WAAW;YACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAAA,MAAM,CAAC,CAAC,CAAC;YAAA,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC5B,CAAC;QACD,IAAW,YAAY;YACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAAA,MAAM,CAAC,CAAC,CAAC;YAAA,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC7B,CAAC;QAEM,gBAAgB,CAAC,IAAS;YAC/B,MAAM,CAAC,GAAG,EAAE,CAAC;YACb,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChC,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC;oBACtB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACZ,CAAC;YACH,CAAC;YACD,MAAM,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,eAAe;YACpB,MAAM,CAAC,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,OAAO,GAAE,SAAS,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YACxC,IAAI,MAAM,GAAG,IAAI,aAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClC,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;gBACrC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;gBACnB,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC;YACxB,CAAC;YACD,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC;YACjB,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC;QACtB,CAAC;QAEM,SAAS,CAAC,MAAyB;YACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;YAC7E,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC/E,CAAC;QACM,aAAa,CAAC,KAAuB;YAC1C,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;QACjC,CAAC;QAEM,SAAS,CAAC,CAAe;YAC9B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QACM,aAAa,CAAC,CAAS;YAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAAA,MAAM,CAAC;YAAA,CAAC;YACrB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC5B,EAAE,CAAC,CAAC,CAAC,YAAY,eAAM,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,GAAG,CAAW,CAAC;oBACtB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,wBAAU,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC9D,CAAC;YACH,CAAC;QACH,CAAC;QAEM,UAAU;YACf,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAClC,KAAK,CAAC;gBACR,CAAC;YACH,CAAC;QACH,CAAC;QACM,YAAY;YACjB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtC,KAAK,CAAC;gBACN,CAAC;YACH,CAAC;QACH,CAAC;QAEM,IAAI;YACT,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClC,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,CAAC;QACH,CAAC;QAEM,iBAAiB,CAAC,KAAY;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAAA,MAAM,CAAC,KAAK,CAAC;YAAA,CAAC;YACjC,MAAM,CAAC,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC9E,CAAC;QACM,iBAAiB,CAAC,KAAY;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAAA,MAAM,CAAC,KAAK,CAAC;YAAA,CAAC;YACjC,MAAM,CAAC,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC9E,CAAC;QAEM,cAAc,CAAC,GAAG;YACvB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAAA,MAAM,CAAC;YAAA,CAAC;YAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACzC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3C,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACzE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC3E,CAAC;QAED,IAAW,QAAQ;YACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;QAEM,WAAW;YAChB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC;QAEM,IAAI;YACT,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC;KAEF;IAjKD,4CAiKC","sourcesContent":["import {CanvasDrawer} from \"./canvas-drawer\";\nimport {CanvasObject} from \"./canvas-object\";\nimport {Point} from \"./point\";\nimport {Player} from \"./player\";\nimport {CustomEventHandler, PropertyChangedEventArgs} from \"./my-custom-events-handler\";\nimport {PlayerData} from \"./player-data\";\n\nexport class CanvasController {\n  public onPropertyChangedEvent: CustomEventHandler<object, PropertyChangedEventArgs> = new CustomEventHandler();\n  private _last_tick: number;\n  private _canvas: HTMLCanvasElement;\n  private readonly _object_list: Array<CanvasObject> = [];\n  private _mousePos: Point = new Point(0,0);\n  private _desired_fps: number;\n  private drawer: CanvasDrawer;\n  private ticker: number;\n  private _selectedObject: Player = null;\n  private storedPlayers: Array<PlayerData> = [];\n\n  constructor(rate: number) {\n    this.drawer = new CanvasDrawer(rate, this._object_list);\n    this._desired_fps = rate;\n\n    this._last_tick = 0;\n    window.addEventListener('mousemove', this.updateMousePos.bind(this), false);\n    this.ticker = window.setInterval(this.tick.bind(this), 1000/this.desired_fps);\n  }\n  get selectedObject(): Player {\n    return this._selectedObject;\n  }\n\n  set selectedObject(value: Player) {\n    if (this._selectedObject === value) {\n      return;\n    }\n    let old = this._selectedObject;\n    if (!!this._selectedObject) {\n      this.selectedObject.selected = false;\n    }\n    this._selectedObject = value;\n    if (!!this._selectedObject) {\n      this.selectedObject.selected = true;\n    }\n    this.onPropertyChangedEvent.Invoke(this,\n      new PropertyChangedEventArgs(\"selectedObject\", old, this.selectedObject));\n  }\n\n  public get desired_fps(): number {\n    return this._desired_fps;\n  }\n\n  private get canvas(): HTMLCanvasElement {\n    return this._canvas;\n  }\n  private set canvas(value: HTMLCanvasElement) {\n    this._canvas = value;\n    this.drawer.setCanvas(this.canvas);\n  }\n\n  public get canvasWidth(): number {\n    if (!this._canvas) {return 0;}\n    return this._canvas.width;\n  }\n  public get canvasHeight(): number {\n    if (!this._canvas) {return 0;}\n    return this._canvas.height;\n  }\n\n  public getObjectsOfType(type: any) {\n    const r = [];\n    for (let o of this._object_list) {\n      if (o instanceof type) {\n        r.push(o);\n      }\n    }\n    return r;\n  }\n\n  public createNewPlayer() {\n    const p = new Player(this);\n    const idx = this.addPlayer(p);\n    let newname =\"Player \" + idx.toString();\n    let newpos = new Point(0.5, 0.5);\n    if (this.storedPlayers.length > 0) {\n      const dat = this.storedPlayers.pop();\n      newname = dat.name;\n      newpos = dat.position;\n    }\n    p.name = newname;\n    p.position = newpos;\n  }\n\n  public setCanvas(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.canvas.addEventListener('mousedown', this.mouseClick.bind(this), false);\n    this.canvas.addEventListener('mouseup', this.mouseRelease.bind(this), false);\n  }\n  public setBackground(image: HTMLImageElement) {\n    this.drawer.background = image;\n  }\n\n  public addPlayer(p: CanvasObject): number {\n    return this._object_list.push(p);\n  }\n  public removePlayers(N: number) {\n    if (N <= 0) {return;}\n    const rem = this._object_list.splice(-N);\n    for (let o of rem.reverse()) {\n      if (o instanceof Player) {\n        const p = o as Player;\n        this.storedPlayers.push(new PlayerData(p.name, p.position));\n      }\n    }\n  }\n\n  public mouseClick() {\n    this.selectedObject = null;\n    for (let obj of this._object_list) {\n      if (obj.mouseClick(this.mousePos)) {\n        break;\n      }\n    }\n  }\n  public mouseRelease() {\n    for (let obj of this._object_list) {\n      if (obj.mouseRelease(this.mousePos)) {\n      break;\n      }\n    }\n  }\n\n  public tick() {\n    for (let obj of this._object_list) {\n      obj.tick();\n    }\n  }\n\n  public CoordinateToPixel(point: Point): Point {\n    if (!this.canvas) {return point;}\n    return new Point(point.x * this.canvas.width, point.y * this.canvas.height);\n  }\n  public PixelToCoordinate(point: Point): Point {\n    if (!this.canvas) {return point;}\n    return new Point(point.x / this.canvas.width, point.y / this.canvas.height);\n  }\n\n  public updateMousePos(evt) {\n    const canvas = this.canvas;\n    if (!this.canvas) {return;}\n    const rect = canvas.getBoundingClientRect(); // abs. size of element\n    const scaleX = canvas.width / rect.width;   // relationship bitmap vs. element for X\n    const scaleY = canvas.height / rect.height;  // relationship bitmap vs. element for Y\n    this.mousePos.x = (evt.clientX - rect.left) * scaleX / this.canvas.width;\n    this.mousePos.y = (evt.clientY - rect.top) * scaleY / this.canvas.height;\n  }\n\n  public get mousePos(): Point {\n    return this._mousePos;\n  }\n\n  public requestDraw() {\n    this.drawer.requestDraw();\n  }\n\n  public draw() {\n    this.drawer.draw();\n  }\n\n}\n"]}